services:
  flight-service:
    image: flight-service:latest
    build:
      context: ./flight-service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./flight-service/.env
    depends_on:
      - flight-db
      - kafka
    volumes:
      - ./flight-service/src:/app/src
      - /app/node_modules
    networks:
      - distributed-booking-system-network
    command: npm run start:dev
  
  hotel-service:
    image: hotel-service:latest
    build:
      context: ./hotel-service
      dockerfile: Dockerfile
    volumes:
      - ./hotel-service/:/app/
    ports:
      - "8010:8010"
    depends_on:
      - hotel-db
      - kafka
    env_file:
      - ./hotel-service/.env
    networks:
      - distributed-booking-system-network
    command: go run main.go

  booking-service:
    image: booking-service:latest
    build:
      context: ./booking-service
      dockerfile: Dockerfile
    volumes:
      - ./booking-service/:/app/
    ports:
      - "8020:8020"
    depends_on:
      - booking-db
      - kafka
    env_file:
      - ./booking-service/.env
    networks:
      - distributed-booking-system-network
    command: go run main.go

  flight-db:
    image: postgres:17
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=flight_db
    ports:
      - "5442:5432"
    volumes:
      - flight_pg_data:/var/lib/postgresql/data
    networks:
      - distributed-booking-system-network
  
  hotel-db:
    image: postgres:17
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=hotel_db
    ports:
      - "5452:5432"
    volumes:
      - hotel_pg_data:/var/lib/postgresql/data
    networks:
      - distributed-booking-system-network

  booking-db:
    image: postgres:17
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=booking_db
    ports:
      - "5462:5432"
    volumes:
      - booking_pg_data:/var/lib/postgresql/data
    networks:
      - distributed-booking-system-network

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - flight-db
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - distributed-booking-system-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - distributed-booking-system-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,PLAINTEXT_INTERNAL://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - distributed-booking-system-network

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-init-topics
    depends_on:
      - kafka
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      # Wait for Kafka to be ready
      echo 'Waiting for Kafka to be ready...'
      until kafka-topics --bootstrap-server kafka:9092 --list >/dev/null 2>&1; do
        sleep 2
      done
      echo 'Kafka is ready. Creating topics...'
      # Create topics
      kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic booking-request || true
      kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic booking-result || true
      echo 'Topics created.'
      "
    networks:
      - distributed-booking-system-network



volumes:
  flight_pg_data:
  hotel_pg_data:
  booking_pg_data:
  pgadmin_data:

networks:
  distributed-booking-system-network:
    driver: bridge
